Конфигурация файла JSON
========================

JSON-файл описывает конфигурацию панели управления умным домом, которая состоит из нескольких страниц (screens), 
каждая из которых содержит до четырех блоков (blocks). Каждый блок представляет собой элемент управления или отображения, соответствующий 
определенному устройству или функции (сцена, свет, климат, завесы, датчик). Ниже представлено структурированное объяснение структуры и работы файла.

Общая структура JSON
--------------------

JSON-файл организован как массив страниц (screens), каждая из которых содержит номер страницы (page) и массив блоков (blocks). Пример общей структуры::
    {
        "screens": [
            {
            "page": 1,
            "blocks": []
            },
            {
            "page": 2,
            "blocks": []
            }
        ]
    }

* **screens**: Основной массив, содержащий все страницы панели.
* **page**: Уникальный номер страницы (целое число).
* **blocks**: Массив блоков, отображаемых на странице. Может содержать от 0 до 4 блоков.

Блоки
-----

Блоки представляют собой элементы интерфейса, которые располагаются на странице в следующем порядке:
#. **Блок 1**: Слева сверху.
#. **Блок 2**: Справа сверху.
#. **Блок 3**: Слева снизу.
#. **Блок 4**: Справа снизу.

Если требуется меньше четырех блоков, ненужные блоки просто не указываются в массиве blocks. Пример для двух блоков::
    
    "blocks": [
        {
            "block": 1,
            "type": "тип блока",
            "data": {}
        },
        {
            "block": 2,
            "type": "тип блока",
            "data": {}
        }
    ]

Для пустой страницы массив blocks остается пустым::
    "blocks": []

Каждый блок содержит:
* **block**: Номер блока (1–4).
* **type**: Тип блока (scene, light, climate, cover, sensor).
* **data**: Объект с параметрами, специфичными для типа блока.

Типы блоков и их подтипы
-------------------------

Блоки делятся на типы, некоторые из которых имеют подтипы (variant_type). Если тип блока поддерживает подтипы, 
поле variant_type обязательно, а параметры подтипа указываются в объекте variant. Структура data::

    "data": 
    {
        // Общие параметры
        "variant_type": "подтип",
        "variant": {
            // Параметры подтипа
        }
    }

#. **scene** (Сценарий): Без подтипов.
#. **sensor** (Датчик): Без подтипов.
#. **light** (Свет):
  * **light_variant_OnOff**: Включение/выключение.
  * **light_variant_dimmer**: Регулировка яркости.
  * **light_variant_color**: Управление цветом и яркостью (RGB).
  * **light_variant_temperature**: Регулировка яркости и цветовой температуры.
#. **climate (Климат)**:
  * **climate_variant_Cond**: Кондиционер.
  * **climate_variant_Thermostat**: Термостат.
#. **cover** (Завесы):
  * **cover_variant_Vertical**: Вертикальные завесы.
  * **cover_variant_Vertical_Lameli**: Вертикальные завесы с ламелями.
  * **cover_variant_Horizontal**: Горизонтальные завесы.
  * **cover_variant_Horizontal_Lameli**: Горизонтальные завесы с ламелями.
